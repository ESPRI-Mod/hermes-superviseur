# -*- coding: utf-8 -*-

"""
.. module:: dispatcher.py
   :copyright: Copyright "Sep 25, 2015", Institute Pierre Simon Laplace
   :license: GPL/CeCIL
   :platform: Unix
   :synopsis: Dispatches supervision scripts to HPC for execution.

.. moduleauthor:: Lola Falletti <lola.falletti@idris.fr>


"""
from prodiguer.utils import config
from prodiguer.utils import mail
from prodiguer.utils import logger



# Operator email subject template.
_EMAIL_SUBJECT = u"HERMES Supervision :: user login {}, job number {} on {} machine"

# Operator email body template.
_EMAIL_BODY = u"""Dear Hermes platform user {},

Something went wrong with your job number {} on {} machine.

{}

To fix it, please find in attachment a bash script generated automatically by the Hermes supervision platform. 
You have to copy it in your $HOME and then do :
source script.ksh

Regards,

The Hermes Supervision Platform"""


class JobSpecificText(object):
    """Custom format to adapt the text in function of the job status.
    
    """
    def __init__(self, job_status, period="XXX", periodDateBegin="XXX", perdiodDateEnd="XXX", 
                 periodNSubmission="X"):
        """Instance constructor.

        """
        self.job_status = job_status
        self.period = period
        self.periodDateBegin = periodDateBegin
        self.perdiodDateEnd = perdiodDateEnd
        if periodNSubmission=="1": self.periodNSubmission = periodNSubmission+"st"
        elif periodNSubmission=="2": self.periodNSubmission = periodNSubmission+"nd"
        elif periodNSubmission=="3": self.periodNSubmission = periodNSubmission+"rd"
        else: self.periodNSubmission = periodNSubmission+"th"

    def __format__(self, format):
        if (self.job_status == 'compute-job-fail'):
            return u"""The Hermes platform has detected that your compute job has failed during the period {} ({}-{}) for the {} time. """.format(self.period, 
                    self.periodDateBegin, self.perdiodDateEnd, self.periodNSubmission)
        if (self.job_status == 'compute-job-late'):
            return u"""The Hermes platform has detected that your compute job is late for the period {} ({}-{}) for the {} time. """.format(self.period, 
                    self.periodDateBegin, self.perdiodDateEnd, self.periodNSubmission)
        return 'Job status not found.'


def _get_script(params):
    """Get the script generated by format_script.py

    """
    return params.supervision.script

def _dispatch_email(params):
    """Dispatches an email to the user for the supervision of his jobs.

    """
    # Retrieve job status
    if params.job.is_error:
        job_status = u'compute-job-fail'
    elif params.job.execution_end_date is None:
        job_status = u'compute-job-late'
   
    # Filled email content.
    subject = _EMAIL_SUBJECT.format(
        params.user.login,
        params.job.scheduler_id,
        params.simulation.compute_node_machine_raw)

    body = _EMAIL_BODY.format(
        params.user.login,
        params.job.scheduler_id,
        params.simulation.compute_node_machine_raw, JobSpecificText(job_status))

    print body

    # Send email.
    # mail.send_email(config.alerts.emailAddressFrom,
    #                params.user.email,
    #                subject,
    #                body)



class DispatchParameters(object):
    """Data required by the dispatcher.

    """
    def __init__(self, simulation, job, supervision, user):
        """Instance constructor.

        """
        self.simulation = simulation
        self.job = job
        self.supervision = supervision
        self.user = user


def dispatch_script(params):
    """Dispatches supervision script to HPC for execution.

    :param DispatchParameters params: Data required to dispatch script to HPC.

    """
    script = _get_script(params)
    if params.user.supervisionLevel == 1:
        _dispatch_email(params)
